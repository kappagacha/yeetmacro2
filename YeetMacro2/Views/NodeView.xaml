<?xml version="1.0" encoding="utf-8" ?>
<ContentView xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:v="clr-namespace:YeetMacro2.Views"
             xmlns:m="clr-namespace:YeetMacro2.Data.Models"
             xmlns:vm="clr-namespace:YeetMacro2.ViewModels"
             xmlns:fa="clr-namespace:UraniumUI.Icons.FontAwesome;assembly=UraniumUI.Icons.FontAwesome"
             xmlns:material="http://schemas.enisn-projects.io/dotnet/maui/uraniumui/material"
             xmlns:mi="clr-namespace:UraniumUI.Icons.MaterialIcons;assembly=UraniumUI.Icons.MaterialIcons"
             xmlns:conv="clr-namespace:YeetMacro2.Converters"
             xmlns:vlv="clr-namespace:Microsoft.Maui.Controls;assembly=VirtualListView"
             x:Class="YeetMacro2.Views.NodeView"
             x:Name="thisView">
    <ContentView.Resources>
        <DataTemplate x:Key="DefaultItemTemplate" x:DataType="{x:Null}">
            <Grid ColumnDefinitions="Auto, *" RowDefinitions="Auto, Auto" ColumnSpacing="5">
                <Grid WidthRequest="15" />
                <v:ToggleImageView Grid.Row="0" Grid.Column="0"
                                    IsVisible="{Binding Nodes.Count, Converter={conv:NumberToBoolConverter}}"
                                    ImageHeight="15"
                                    ImageWidth="15"
                                    FontFamily="MaterialOutlined" 
                                    Glyph="{x:Static mi:MaterialOutlined.Keyboard_arrow_right}"
                                    ToggledGlyph="{x:Static mi:MaterialOutlined.Keyboard_arrow_down}"
                                    IsToggled="{Binding IsExpanded}"
                                    IsToggledFromImageOnly="True"
                                    HeightRequest="20" />
                <Grid Grid.Row="0" Grid.Column="1" HeightRequest="20">
                    <Grid HeightRequest="20">
                        <Label Text="{Binding Name}" TextColor="{StaticResource Primary}" Margin="0" Padding="0" VerticalOptions="Center" BackgroundColor="Transparent">
                            <Label.Triggers>
                                <DataTrigger TargetType="Label" Binding="{Binding IsSelected}" Value="True">
                                    <Setter Property="BackgroundColor" Value="Blue" />
                                </DataTrigger>
                            </Label.Triggers>
                        </Label>
                        <ImageButton Margin="0" Padding="0" CommandParameter="{Binding .}" 
                            Command="{Binding NodeManager.SelectNodeCommand, Source={RelativeSource AncestorType={x:Type v:NodeView}}}" />
                    </Grid>
                </Grid>
                <Grid Grid.Row="1" Grid.Column="1" IsVisible="{Binding Nodes.Count, Converter={conv:NumberToBoolConverter}}">
                    <!--<CollectionView ItemsSource="{Binding Nodes}" IsVisible="{Binding IsExpanded}"
                                ItemTemplate="{DynamicResource DefaultItemTemplate}" />-->
                    <vlv:VirtualListView Adapter="{Binding Nodes}" IsVisible="{Binding IsExpanded}"
                                ItemTemplate="{DynamicResource DefaultItemTemplate}" HeightRequest="{Binding NodesHeight}" />
                </Grid>
            </Grid>
        </DataTemplate>
    </ContentView.Resources>
    <Grid>
        <Grid IsVisible="{Binding NodeManager.ShowExport, Converter={conv:InverseBoolConverter}, Source={Reference thisView}}">
            <!--<CollectionView ItemTemplate="{Binding ItemTemplate, Source={Reference thisView}, TargetNullValue={StaticResource DefaultItemTemplate}}"
                                HorizontalOptions="Fill"  VerticalOptions="Fill">
                    <CollectionView.Triggers>
                        <DataTrigger TargetType="CollectionView" Binding="{Binding ItemsSource, Source={Reference thisView}, Converter={conv:NullToBoolConverter}}" Value="True">
                            <Setter Property="ItemsSource" Value="{Binding NodeManager.Root.Nodes, Source={Reference thisView}}" />
                        </DataTrigger>
                        <DataTrigger TargetType="CollectionView" Binding="{Binding ItemsSource, Source={Reference thisView}, Converter={conv:NullToBoolConverter}}" Value="False">
                            <Setter Property="ItemsSource" Value="{Binding ItemsSource, Source={Reference thisView}}" />
                        </DataTrigger>
                    </CollectionView.Triggers>
                </CollectionView>-->
            <vlv:VirtualListView ItemTemplate="{Binding ItemTemplate, Source={Reference thisView}, TargetNullValue={StaticResource DefaultItemTemplate}}"
                                     ItemTemplateSelector="{Binding ItemTemplateSelector, Source={Reference thisView}}"
                                     HorizontalOptions="Fill" VerticalOptions="Fill">
                <vlv:VirtualListView.Triggers>
                    <DataTrigger TargetType="vlv:VirtualListView" Binding="{Binding ItemsSource, Source={Reference thisView}, Converter={conv:NullToBoolConverter}}" Value="True">
                        <Setter Property="Adapter" Value="{Binding NodeManager.Root.Nodes, Source={Reference thisView}}" />
                    </DataTrigger>
                    <DataTrigger TargetType="vlv:VirtualListView" Binding="{Binding ItemsSource, Source={Reference thisView}, Converter={conv:NullToBoolConverter}}" Value="False">
                        <Setter Property="Adapter" Value="{Binding ItemsSource, Source={Reference thisView}}" />
                    </DataTrigger>
                </vlv:VirtualListView.Triggers>
            </vlv:VirtualListView>
            <Grid VerticalOptions="End" HorizontalOptions="End" BindingContext="{Binding ., Source={Reference thisView}}"
                  IsVisible="{Binding IsMenuVisible, Source={Reference thisView}}">
                <VerticalStackLayout>
                    <VerticalStackLayout IsVisible="{Binding IsToggled, Source={Reference menuToggle}}">
                        <ContentView x:Name="extraMenuItemsContentView" />
                        <v:ImageView FontFamily="MaterialOutlined" Glyph="{x:Static mi:MaterialOutlined.Unfold_more_double}" Command="{Binding NodeManager.ExpandAllCommand}" 
                                     IsVisible="{Binding NodeManager.IsList, Converter={conv:InverseBoolConverter}}" />
                        <v:ImageView FontFamily="MaterialOutlined" Glyph="{x:Static mi:MaterialOutlined.Unfold_less_double}" Command="{Binding NodeManager.CollapseAllCommand}" 
                                     IsVisible="{Binding NodeManager.IsList, Converter={conv:InverseBoolConverter}}" />
                        <v:ImageView FontFamily="MaterialRegular" Glyph="{x:Static mi:MaterialRegular.Vertical_align_top}"
                                     IsVisible="{Binding NodeManager.SelectedNode, Converter={conv:NullToBoolConverter IsInverse=True}}"
                                     Command="{Binding NodeManager.MoveNodeTopCommand}" CommandParameter="{Binding NodeManager.SelectedNode}" />
                        <v:ImageView FontFamily="FASolid" Glyph="{x:Static fa:Solid.ArrowUp}"
                                    IsVisible="{Binding NodeManager.SelectedNode, Converter={conv:NullToBoolConverter IsInverse=True}}"
                                    Command="{Binding NodeManager.MoveNodeUpCommand}" CommandParameter="{Binding NodeManager.SelectedNode}" />
                        <v:ImageView FontFamily="FASolid" Glyph="{x:Static fa:Solid.ArrowDown}"
                                     IsVisible="{Binding NodeManager.SelectedNode, Converter={conv:NullToBoolConverter IsInverse=True}}"
                                     Command="{Binding NodeManager.MoveNodeDownCommand}" CommandParameter="{Binding NodeManager.SelectedNode}" />
                        <v:ImageView FontFamily="MaterialRegular" Glyph="{x:Static mi:MaterialRegular.Vertical_align_bottom}"
                                     IsVisible="{Binding NodeManager.SelectedNode, Converter={conv:NullToBoolConverter IsInverse=True}}"
                                     Command="{Binding NodeManager.MoveNodeBottomCommand}" CommandParameter="{Binding NodeManager.SelectedNode}" />
                        <v:ImageView FontFamily="FASolid" Glyph="{x:Static fa:Solid.Pencil}"
                                     IsVisible="{Binding NodeManager.SelectedNode, Converter={conv:NullToBoolConverter IsInverse=True}}"
                                     Command="{Binding NodeManager.RenameNodeCommand}" CommandParameter="{Binding NodeManager.SelectedNode}" />
                        <Grid IsVisible="{Binding NodeManager.HasCopyClipboard, Converter={conv:InverseBoolConverter}}">
                            <v:ImageView FontFamily="MaterialOutlined" Glyph="{x:Static mi:MaterialOutlined.Content_copy}"
                                         IsVisible="{Binding NodeManager.SelectedNode, Converter={conv:NullToBoolConverter IsInverse=True}}"
                                         Command="{Binding NodeManager.CopyNodeCommand}" CommandParameter="{Binding NodeManager.SelectedNode}" />
                        </Grid>
                        <Grid IsVisible="{Binding NodeManager.HasCopyClipboard}">
                            <v:ImageView FontFamily="MaterialOutlined" Glyph="{x:Static mi:MaterialOutlined.Content_paste}" Command="{Binding NodeManager.PasteNodeCommand}"
                                IsVisible="{Binding NodeManager.SelectedNode.IsParentNode}"/>
                            <v:ImageView FontFamily="MaterialOutlined" Glyph="{x:Static mi:MaterialOutlined.Content_paste}" Command="{Binding NodeManager.PasteNodeCommand}"
                                IsVisible="{Binding NodeManager.SelectedNode, Converter={conv:NullToBoolConverter IsInverse=True}}"/>
                        </Grid>
                        <v:ImageView FontFamily="MaterialOutlined" Glyph="{x:Static mi:MaterialOutlined.Content_paste_off}"
                                     IsVisible="{Binding NodeManager.HasCopyClipboard}"
                                     Command="{Binding NodeManager.ClearCopyNodeCommand}" />
                        <v:ImageView FontFamily="FASolid" Glyph="{x:Static fa:Solid.TrashCan}" Color="Red" 
                                 IsVisible="{Binding NodeManager.SelectedNode, Converter={conv:NullToBoolConverter IsInverse=True}}"
                                 Command="{Binding NodeManager.DeleteNodeCommand}" CommandParameter="{Binding NodeManager.SelectedNode}" />
                        <v:ImageView FontFamily="FASolid" Glyph="{x:Static fa:Solid.Plus}" Command="{Binding NodeManager.AddNodeCommand}"
                                 IsVisible="{Binding NodeManager.SelectedNode.IsParentNode}"/>
                        <v:ImageView FontFamily="MaterialOutlined" Glyph="{x:Static mi:MaterialOutlined.Sort}" Command="{Binding NodeManager.RefreshCollectionsCommand}" 
                                     IsVisible="{Binding NodeManager.IsList}" />
                    </VerticalStackLayout>
                    <v:ToggleImageView x:Name="menuToggle" FontFamily="FASolid" Glyph="{x:Static fa:Solid.Bars}" ToggledColor="{StaticResource Primary}" />
                </VerticalStackLayout>
            </Grid>
        </Grid>
        <Grid IsVisible="{Binding NodeManager.ShowExport, Source={Reference thisView}}">
            <Editor x:Name="exportEditor" Text="{Binding NodeManager.ExportValue, Source={Reference thisView}}" />
            <HorizontalStackLayout HorizontalOptions="End" VerticalOptions="Start">
                <v:ImageView FontFamily="MaterialOutlined" Glyph="{x:Static mi:MaterialOutlined.Select_all}">
                    <v:ImageView.GestureRecognizers>
                        <TapGestureRecognizer Tapped="ExportEditor_SelectAll" />
                    </v:ImageView.GestureRecognizers>
                </v:ImageView>
                <v:ImageView FontFamily="MaterialOutlined" Glyph="{x:Static mi:MaterialOutlined.Close}" Color="Red"
                             Command="{Binding NodeManager.CloseExportCommand, Source={Reference thisView}}" />
            </HorizontalStackLayout>
        </Grid>
        <ActivityIndicator IsRunning="{Binding NodeManager.IsInitialized, Converter={conv:InverseBoolConverter}, Source={Reference thisView}}" />
    </Grid>
</ContentView>
