<?xml version="1.0" encoding="utf-8" ?>
<ContentView xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:v="clr-namespace:YeetMacro2.Views"
             xmlns:m="clr-namespace:YeetMacro2.Data.Models"
             xmlns:vm="clr-namespace:YeetMacro2.ViewModels"
             xmlns:fa="clr-namespace:UraniumUI.Icons.FontAwesome;assembly=UraniumUI.Icons.FontAwesome"
             xmlns:material="http://schemas.enisn-projects.io/dotnet/maui/uraniumui/material"
             xmlns:mi="clr-namespace:UraniumUI.Icons.MaterialIcons;assembly=UraniumUI.Icons.MaterialIcons"
             xmlns:conv="clr-namespace:YeetMacro2.Converters"
             x:Class="YeetMacro2.Views.NodeView"
             x:Name="thisView">
    <ContentView.Resources>
        <DataTemplate x:Key="DefaultItemTemplate">
            <Label Text="{Binding Name}" TextColor="{StaticResource PrimaryDark}" Margin="0" Padding="0" VerticalOptions="Center" BackgroundColor="Transparent">
                <Label.Triggers>
                    <DataTrigger TargetType="{x:Type Label}" Binding="{Binding IsSelected}" Value="True">
                        <Setter Property="Background" Value="Blue" />
                    </DataTrigger>
                </Label.Triggers>
                <Label.GestureRecognizers>
                    <TapGestureRecognizer CommandParameter="{Binding .}" Command="{Binding NodeManager.SelectNodeCommand, Source={RelativeSource AncestorType={x:Type v:NodeView}}}" />
                </Label.GestureRecognizers>
            </Label>
        </DataTemplate>
    </ContentView.Resources>
    <Grid>
        <Grid IsVisible="{Binding NodeManager.ShowExport, Converter={conv:InverseBoolConverter}, Source={Reference thisView}}">
            <ScrollView>
                <material:TreeView ItemTemplate="{Binding ItemTemplate, Source={Reference thisView}, TargetNullValue={StaticResource DefaultItemTemplate}}"
                                   Spacing="0" HorizontalOptions="Fill"  VerticalOptions="Fill">
                    <material:TreeView.Triggers>
                        <DataTrigger TargetType="{x:Type material:TreeView}" Binding="{Binding ItemsSource, Source={Reference thisView}, Converter={conv:NullToBoolConverter}}" Value="True">
                            <Setter Property="ItemsSource" Value="{Binding NodeManager.Root.Children, Source={Reference thisView}}" />
                        </DataTrigger>
                        <DataTrigger TargetType="{x:Type material:TreeView}" Binding="{Binding ItemsSource, Source={Reference thisView}, Converter={conv:NullToBoolConverter}}" Value="False">
                            <Setter Property="ItemsSource" Value="{Binding ItemsSource, Source={Reference thisView}}" />
                        </DataTrigger>
                    </material:TreeView.Triggers>
                </material:TreeView>
            </ScrollView>
            <Grid VerticalOptions="End" HorizontalOptions="End" BindingContext="{Binding ., Source={Reference thisView}}"
                  IsVisible="{Binding IsMenuVisible, Source={Reference thisView}}">
                <VerticalStackLayout>
                    <VerticalStackLayout IsVisible="{Binding IsMenuOpen}">
                        <ContentView x:Name="extraMenuItemsContentView" />
                        <v:ImageView FontFamily="MaterialOutlined" Glyph="{x:Static mi:MaterialOutlined.Unfold_more_double}" Command="{Binding NodeManager.ExpandAllCommand}" 
                                     IsVisible="{Binding NodeManager.IsList, Converter={conv:InverseBoolConverter}}" />
                        <v:ImageView FontFamily="FASolid" Glyph="{x:Static fa:Solid.Pencil}"
                                     IsVisible="{Binding NodeManager.SelectedNode, Converter={conv:NullToBoolConverter IsInverse=True}}"
                                     Command="{Binding NodeManager.RenameNodeCommand}" CommandParameter="{Binding NodeManager.SelectedNode}" />
                        <Grid IsVisible="{Binding NodeManager.HasCopyClipboard, Converter={conv:InverseBoolConverter}}">
                            <v:ImageView FontFamily="MaterialOutlined" Glyph="{x:Static mi:MaterialOutlined.Content_copy}"
                                 IsVisible="{Binding NodeManager.SelectedNode, Converter={conv:NullToBoolConverter IsInverse=True}}"
                                 Command="{Binding NodeManager.CopyNodeCommand}" CommandParameter="{Binding NodeManager.SelectedNode}" />
                        </Grid>
                        <Grid IsVisible="{Binding NodeManager.HasCopyClipboard}">
                            <v:ImageView FontFamily="MaterialOutlined" Glyph="{x:Static mi:MaterialOutlined.Content_paste}" Command="{Binding NodeManager.PasteNodeCommand}"
                                IsVisible="{Binding NodeManager.SelectedNode.IsParentNode}"/>
                            <v:ImageView FontFamily="MaterialOutlined" Glyph="{x:Static mi:MaterialOutlined.Content_paste}" Command="{Binding NodeManager.PasteNodeCommand}"
                                IsVisible="{Binding NodeManager.SelectedNode, Converter={conv:NullToBoolConverter IsInverse=True}}"/>
                        </Grid>
                        <v:ImageView FontFamily="MaterialOutlined" Glyph="{x:Static mi:MaterialOutlined.Content_paste_off}"
                                     IsVisible="{Binding NodeManager.HasCopyClipboard}"
                                     Command="{Binding NodeManager.ClearCopyNodeCommand}" />
                        <v:ImageView FontFamily="FASolid" Glyph="{x:Static fa:Solid.TrashCan}" Color="Red" 
                                 IsVisible="{Binding NodeManager.SelectedNode, Converter={conv:NullToBoolConverter IsInverse=True}}"
                                 Command="{Binding NodeManager.DeleteNodeCommand}" CommandParameter="{Binding NodeManager.SelectedNode}" />
                        <v:ImageView FontFamily="FASolid" Glyph="{x:Static fa:Solid.Plus}" Command="{Binding NodeManager.AddNodeCommand}"
                                 IsVisible="{Binding NodeManager.SelectedNode.IsParentNode}"/>
                        <v:ImageView FontFamily="MaterialOutlined" Glyph="{x:Static mi:MaterialOutlined.Unfold_less_double}" Command="{Binding NodeManager.CollapseAllCommand}" 
                                     IsVisible="{Binding NodeManager.IsList, Converter={conv:InverseBoolConverter}}" />
                    </VerticalStackLayout>
                    <Border Stroke="{StaticResource Primary}" StrokeThickness="0" BackgroundColor="Transparent">
                        <Border.Triggers>
                            <DataTrigger TargetType="Border" Binding="{Binding IsMenuOpen}" Value="True">
                                <Setter Property="StrokeThickness" Value="1" />
                            </DataTrigger>
                        </Border.Triggers>
                        <v:ImageView FontFamily="FASolid" Glyph="{x:Static fa:Solid.Bars}"
                             Command="{Binding ToggleIsMenuOpenCommand}" />
                    </Border>
                </VerticalStackLayout>
            </Grid>
        </Grid>
        <Grid IsVisible="{Binding NodeManager.ShowExport, Source={Reference thisView}}">
            <Editor x:Name="exportEditor" Text="{Binding NodeManager.ExportValue, Source={Reference thisView}}" />
            <HorizontalStackLayout HorizontalOptions="End" VerticalOptions="Start">
                <v:ImageView FontFamily="MaterialOutlined" Glyph="{x:Static mi:MaterialOutlined.Select_all}">
                    <v:ImageView.GestureRecognizers>
                        <TapGestureRecognizer Tapped="ExportEditor_SelectAll" />
                    </v:ImageView.GestureRecognizers>
                </v:ImageView>
                <v:ImageView FontFamily="MaterialOutlined" Glyph="{x:Static mi:MaterialOutlined.Close}" Color="Red"
                             Command="{Binding NodeManager.CloseExportCommand, Source={Reference thisView}}" />
            </HorizontalStackLayout>
        </Grid>
        <ActivityIndicator IsRunning="{Binding NodeManager.IsInitialized, Converter={conv:InverseBoolConverter}, Source={Reference thisView}}" />
    </Grid>
</ContentView>
