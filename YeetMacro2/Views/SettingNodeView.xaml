<?xml version="1.0" encoding="utf-8" ?>
<ContentView xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             x:Class="YeetMacro2.Views.SettingNodeView"
             xmlns:vm="clr-namespace:YeetMacro2.ViewModels"
             xmlns:v="clr-namespace:YeetMacro2.Views"
             xmlns:conv="clr-namespace:YeetMacro2.Converters"
             xmlns:m="clr-namespace:YeetMacro2.Data.Models"
             x:DataType="vm:MacroManagerViewModel"
             vm:ViewModelLocator.ViewModelType="{x:Type vm:MacroManagerViewModel}"
             xmlns:mct="http://schemas.microsoft.com/dotnet/2022/maui/toolkit"
             xmlns:fa="clr-namespace:UraniumUI.Icons.FontAwesome;assembly=UraniumUI.Icons.FontAwesome"
             xmlns:mi="clr-namespace:UraniumUI.Icons.MaterialIcons;assembly=UraniumUI.Icons.MaterialIcons"
             xmlns:material="http://schemas.enisn-projects.io/dotnet/maui/uraniumui/material"
             BackgroundColor="{AppThemeBinding Light={StaticResource Background}, Dark={StaticResource BackgroundDark}}"
             x:Name="thisView">
    <ContentView.Resources>
        <DataTemplate x:Key="ParentSettingTemplate" x:DataType="{x:Type vm:MacroSetViewModel}">
            <VerticalStackLayout>
                <Label Text="{Binding Name}" VerticalOptions="Center" />
            </VerticalStackLayout>
        </DataTemplate>
        <DataTemplate x:Key="BooleanSettingTemplate">
            <HorizontalStackLayout>
                <Label x:Name="label" Text="{Binding Name}" VerticalOptions="Center" />
                <CheckBox x:Name="booleanSettingCheckbox" IsChecked="{Binding Value}" VerticalOptions="Center" HeightRequest="{Binding Height, Source={Reference label}}">
                    <CheckBox.Behaviors>
                        <mct:EventToCommandBehavior
                            EventName="CheckedChanged"
                            Command="{Binding BindingContext.Settings.SaveSettingCommand, Source={x:Reference thisView}}"
                            CommandParameter="{Binding BindingContext, Source={x:Reference booleanSettingCheckbox}}"/>
                    </CheckBox.Behaviors>
                </CheckBox>
                <v:ImageView
                    VerticalOptions="Center" FontFamily="MaterialOutlined" Glyph="{x:Static mi:MaterialOutlined.Refresh}"
                    Command="{Binding BindingContext.Settings.ResetSettingCommand, Source={RelativeSource AncestorType={x:Type v:SettingNodeView}}}"
                    CommandParameter="{Binding BindingContext, Source={RelativeSource AncestorType={x:Type v:BindingContextView}}}" />
            </HorizontalStackLayout>
        </DataTemplate>
        <DataTemplate x:Key="OptionSettingTemplate">
            <HorizontalStackLayout>
                <Label x:Name="label" Text="{Binding Name, StringFormat='{0}:'}" VerticalOptions="Center" />
                <Grid Margin="10,0,0,0" Padding="0" VerticalOptions="Center" HeightRequest="{Binding Height, Source={Reference label}}">
                    <Label Margin="0" Padding="0" Text="{Binding Value}" VerticalOptions="Center" />
                    <ImageButton Margin="0" Padding="0"
                        Command="{Binding BindingContext.Settings.SelectOptionCommand, Source={RelativeSource AncestorType={x:Type v:SettingNodeView}}}"
                        CommandParameter="{Binding BindingContext, Source={RelativeSource AncestorType={x:Type v:BindingContextView}}}" />
                </Grid>
                <v:ImageView
                        VerticalOptions="Center" FontFamily="MaterialOutlined" Glyph="{x:Static mi:MaterialOutlined.Add}"
                        Command="{Binding BindingContext.Settings.AddOptionCommand, Source={RelativeSource AncestorType={x:Type v:SettingNodeView}}}"
                        CommandParameter="{Binding BindingContext, Source={RelativeSource AncestorType={x:Type v:BindingContextView}}}" />
                <v:ImageView
                        VerticalOptions="Center" FontFamily="MaterialOutlined" Glyph="{x:Static mi:MaterialOutlined.Refresh}"
                        Command="{Binding BindingContext.Settings.ResetSettingCommand, Source={RelativeSource AncestorType={x:Type v:SettingNodeView}}}"
                        CommandParameter="{Binding BindingContext, Source={RelativeSource AncestorType={x:Type v:BindingContextView}}}" />
            </HorizontalStackLayout>
        </DataTemplate>
        <DataTemplate x:Key="StringSettingTemplate">
            <HorizontalStackLayout>
                <Label VerticalOptions="Center" Text="{Binding Name}" />
                <Entry x:Name="stringSettingEntry" Margin="5,0,0,0" VerticalOptions="Center" Text="{Binding Value}">
                    <Entry.Behaviors>
                        <mct:UserStoppedTypingBehavior
                            Command="{Binding BindingContext.Settings.SaveSettingCommand, Source={x:Reference thisView}}"
                            CommandParameter="{Binding BindingContext, Source={x:Reference stringSettingEntry}}"
                            StoppedTypingTimeThreshold="500"
                            MinimumLengthThreshold="1" />
                    </Entry.Behaviors>
                </Entry>
                <v:ImageView
                    VerticalOptions="Center" FontFamily="MaterialOutlined" Glyph="{x:Static mi:MaterialOutlined.Refresh}"
                    Command="{Binding BindingContext.Settings.ResetSettingCommand, Source={RelativeSource AncestorType={x:Type v:SettingNodeView}}}"
                    CommandParameter="{Binding BindingContext, Source={RelativeSource AncestorType={x:Type v:BindingContextView}}}" />
            </HorizontalStackLayout>
        </DataTemplate>
        <DataTemplate x:Key="IntegerSettingTemplate">
            <HorizontalStackLayout>
                <Label x:Name="label" VerticalOptions="Center" Text="{Binding Name}" />
                <v:ImageView
                    VerticalOptions="Center" FontFamily="MaterialOutlined" Glyph="{x:Static mi:MaterialOutlined.Remove}"
                    Command="{Binding BindingContext.Settings.DecrementCommand, Source={RelativeSource AncestorType={x:Type v:SettingNodeView}}}"
                    CommandParameter="{Binding BindingContext, Source={RelativeSource AncestorType={x:Type v:BindingContextView}}}" />
                <Entry x:Name="integerSettingEntry" Margin="5,0,0,0" VerticalOptions="Center" Text="{Binding Value}" Keyboard="Numeric">
                    <Entry.Behaviors>
                        <mct:UserStoppedTypingBehavior
                            Command="{Binding BindingContext.Settings.SaveSettingCommand, Source={x:Reference thisView}}"
                            CommandParameter="{Binding BindingContext, Source={x:Reference integerSettingEntry}}"
                            StoppedTypingTimeThreshold="500"
                            MinimumLengthThreshold="1" />
                        <mct:NumericValidationBehavior MaximumDecimalPlaces="0"
                                                       Flags="ValidateOnValueChanged">
                            <mct:NumericValidationBehavior.InvalidStyle>
                                <Style TargetType="Entry">
                                    <Setter Property="BackgroundColor" Value="Red" />
                                </Style>
                            </mct:NumericValidationBehavior.InvalidStyle>
                        </mct:NumericValidationBehavior>
                    </Entry.Behaviors>
                </Entry>
                <v:ImageView
                    VerticalOptions="Center" FontFamily="MaterialOutlined" Glyph="{x:Static mi:MaterialOutlined.Add}"
                    Command="{Binding BindingContext.Settings.IncrementCommand, Source={RelativeSource AncestorType={x:Type v:SettingNodeView}}}"
                    CommandParameter="{Binding BindingContext, Source={RelativeSource AncestorType={x:Type v:BindingContextView}}}" />
                <v:ImageView
                    VerticalOptions="Center" FontFamily="MaterialOutlined" Glyph="{x:Static mi:MaterialOutlined.Refresh}"
                    Command="{Binding BindingContext.Settings.ResetSettingCommand, Source={RelativeSource AncestorType={x:Type v:SettingNodeView}}}"
                    CommandParameter="{Binding BindingContext, Source={RelativeSource AncestorType={x:Type v:BindingContextView}}}" />
                <Entry x:Name="integerIncrementSettingEntry" Margin="5,0,0,0" VerticalOptions="Center" Text="{Binding Increment}" Keyboard="Numeric">
                    <Entry.Behaviors>
                        <mct:UserStoppedTypingBehavior
                            Command="{Binding BindingContext.Settings.SaveSettingCommand, Source={x:Reference thisView}}"
                            CommandParameter="{Binding BindingContext, Source={x:Reference integerIncrementSettingEntry}}"
                            StoppedTypingTimeThreshold="500"
                            MinimumLengthThreshold="1" />
                        <mct:NumericValidationBehavior MaximumDecimalPlaces="0"
                                       Flags="ValidateOnValueChanged">
                            <mct:NumericValidationBehavior.InvalidStyle>
                                <Style TargetType="Entry">
                                    <Setter Property="BackgroundColor" Value="Red" />
                                </Style>
                            </mct:NumericValidationBehavior.InvalidStyle>
                        </mct:NumericValidationBehavior>
                    </Entry.Behaviors>
                </Entry>
                <v:ImageView VerticalOptions="Center" FontFamily="MaterialOutlined" Glyph="{x:Static mi:MaterialOutlined.Trending_up}"/>
            </HorizontalStackLayout>
        </DataTemplate>
        <DataTemplate x:Key="EnabledIntegerSettingTemplate">
            <HorizontalStackLayout>
                <CheckBox x:Name="integerSettingIsActiveCheckbox" IsChecked="{Binding IsEnabled}" VerticalOptions="Center" HeightRequest="{Binding Height, Source={Reference label}}">
                    <CheckBox.Behaviors>
                        <mct:EventToCommandBehavior
                            EventName="CheckedChanged"
                            Command="{Binding BindingContext.Settings.SaveSettingCommand, Source={x:Reference thisView}}"
                            CommandParameter="{Binding BindingContext, Source={x:Reference integerSettingIsActiveCheckbox}}"/>
                    </CheckBox.Behaviors>
                </CheckBox>
                <Label x:Name="label" VerticalOptions="Center" Text="{Binding Name}" />
                <v:ImageView
                    IsEnabled="{Binding IsEnabled}"
                    VerticalOptions="Center" FontFamily="MaterialOutlined" Glyph="{x:Static mi:MaterialOutlined.Remove}"
                    Command="{Binding BindingContext.Settings.DecrementCommand, Source={RelativeSource AncestorType={x:Type v:SettingNodeView}}}"
                    CommandParameter="{Binding BindingContext, Source={RelativeSource AncestorType={x:Type v:BindingContextView}}}" />
                <Entry x:Name="integerSettingEntry" Margin="5,0,0,0" VerticalOptions="Center" Text="{Binding Value}" Keyboard="Numeric" 
                       IsEnabled="{Binding IsEnabled}">
                    <Entry.Behaviors>
                        <mct:UserStoppedTypingBehavior
                            Command="{Binding BindingContext.Settings.SaveSettingCommand, Source={x:Reference thisView}}"
                            CommandParameter="{Binding BindingContext, Source={x:Reference integerSettingEntry}}"
                            StoppedTypingTimeThreshold="500"
                            MinimumLengthThreshold="1" />
                        <mct:NumericValidationBehavior MaximumDecimalPlaces="0"
                                               Flags="ValidateOnValueChanged">
                            <mct:NumericValidationBehavior.InvalidStyle>
                                <Style TargetType="Entry">
                                    <Setter Property="BackgroundColor" Value="Red" />
                                </Style>
                            </mct:NumericValidationBehavior.InvalidStyle>
                        </mct:NumericValidationBehavior>
                    </Entry.Behaviors>
                </Entry>
                <v:ImageView
                    IsEnabled="{Binding IsEnabled}"
                    VerticalOptions="Center" FontFamily="MaterialOutlined" Glyph="{x:Static mi:MaterialOutlined.Add}"
                    Command="{Binding BindingContext.Settings.IncrementCommand, Source={RelativeSource AncestorType={x:Type v:SettingNodeView}}}"
                    CommandParameter="{Binding BindingContext, Source={RelativeSource AncestorType={x:Type v:BindingContextView}}}" />
                <v:ImageView
                    IsEnabled="{Binding IsEnabled}"
                    VerticalOptions="Center" FontFamily="MaterialOutlined" Glyph="{x:Static mi:MaterialOutlined.Refresh}"
                    Command="{Binding BindingContext.Settings.ResetSettingCommand, Source={RelativeSource AncestorType={x:Type v:SettingNodeView}}}"
                    CommandParameter="{Binding BindingContext, Source={RelativeSource AncestorType={x:Type v:BindingContextView}}}" />
                <Entry x:Name="integerIncrementSettingEntry" Margin="5,0,0,0" VerticalOptions="Center" 
                       Text="{Binding Increment}" Keyboard="Numeric" IsEnabled="{Binding IsEnabled}">
                    <Entry.Behaviors>
                        <mct:UserStoppedTypingBehavior
                            Command="{Binding BindingContext.Settings.SaveSettingCommand, Source={x:Reference thisView}}"
                            CommandParameter="{Binding BindingContext, Source={x:Reference integerIncrementSettingEntry}}"
                            StoppedTypingTimeThreshold="500"
                            MinimumLengthThreshold="1" />
                        <mct:NumericValidationBehavior MaximumDecimalPlaces="0"
                               Flags="ValidateOnValueChanged">
                            <mct:NumericValidationBehavior.InvalidStyle>
                                <Style TargetType="Entry">
                                    <Setter Property="BackgroundColor" Value="Red" />
                                </Style>
                            </mct:NumericValidationBehavior.InvalidStyle>
                        </mct:NumericValidationBehavior>
                    </Entry.Behaviors>
                </Entry>
                <v:ImageView VerticalOptions="Center" FontFamily="MaterialOutlined" Glyph="{x:Static mi:MaterialOutlined.Trending_up}" 
                             IsEnabled="{Binding IsEnabled}"/>
            </HorizontalStackLayout>
        </DataTemplate>
        <DataTemplate x:Key="PatternSettingTemplate">
            <VerticalStackLayout>
                <Label Text="{Binding Name}" />
            </VerticalStackLayout>
        </DataTemplate>
    </ContentView.Resources>
    <Grid ColumnDefinitions="*">
        <Grid.Triggers>
            <DataTrigger TargetType="Grid" Binding="{Binding Settings.SelectedPatternNode, Converter={conv:NullToBoolConverter IsInverse=True}}" Value="True">
                <Setter Property="ColumnDefinitions" Value="*,3*" />
            </DataTrigger>
        </Grid.Triggers>
        <Border Grid.Column="0" Stroke="{StaticResource Primary}" BackgroundColor="Transparent" Padding="3">
            <v:NodeView NodeManager="{Binding Settings}" IsMenuVisible="{Binding IsSubView, Converter={conv:InverseBoolConverter}, Source={Reference thisView}}">
                <v:NodeView.Triggers>
                    <DataTrigger TargetType="{x:Type v:NodeView}" Binding="{Binding IsSubView, Source={Reference thisView}}" Value="True">
                        <Setter Property="ItemsSource" Value="{Binding Settings.CurrentSubViewModel.Nodes}" />
                    </DataTrigger>
                </v:NodeView.Triggers>
                <v:NodeView.ItemTemplate>
                    <DataTemplate x:DataType="{x:Type m:SettingNode}">
                        <Grid ColumnDefinitions="Auto,*,Auto">
                            <Grid.Triggers>
                                <DataTrigger TargetType="{x:Type Grid}" Binding="{Binding IsSelected}" Value="True">
                                    <Setter Property="Background" Value="Blue" />
                                </DataTrigger>
                            </Grid.Triggers>
                            <Grid.GestureRecognizers>
                                <TapGestureRecognizer CommandParameter="{Binding .}" Command="{Binding NodeManager.SelectNodeCommand, Source={RelativeSource AncestorType={x:Type v:NodeView}}}" />
                            </Grid.GestureRecognizers>
                            <v:ImageView Grid.Column="0" ImageWidth="20" ImageHeight="20">
                                <v:ImageView.Triggers>
                                    <DataTrigger TargetType="{x:Type v:ImageView}" Binding="{Binding SettingType}" Value="{x:Static m:SettingType.Parent}">
                                        <Setter Property="IsVisible" Value="False" />
                                    </DataTrigger>
                                    <DataTrigger TargetType="{x:Type v:ImageView}" Binding="{Binding SettingType}" Value="{x:Static m:SettingType.Boolean}">
                                        <Setter Property="FontFamily" Value="MaterialOutlined" />
                                        <Setter Property="Glyph" Value="{x:Static mi:MaterialOutlined.Rule}" />
                                    </DataTrigger>
                                    <DataTrigger TargetType="{x:Type v:ImageView}" Binding="{Binding SettingType}" Value="{x:Static m:SettingType.Option}">
                                        <Setter Property="FontFamily" Value="MaterialOutlined" />
                                        <Setter Property="Glyph" Value="{x:Static mi:MaterialOutlined.Ballot}" />
                                    </DataTrigger>
                                    <DataTrigger TargetType="{x:Type v:ImageView}" Binding="{Binding SettingType}" Value="{x:Static m:SettingType.Pattern}">
                                        <Setter Property="FontFamily" Value="MaterialOutlined" />
                                        <Setter Property="Glyph" Value="{x:Static mi:MaterialOutlined.Image_search}" />
                                    </DataTrigger>
                                    <DataTrigger TargetType="{x:Type v:ImageView}" Binding="{Binding SettingType}" Value="{x:Static m:SettingType.Integer}">
                                        <Setter Property="FontFamily" Value="FASolid" />
                                        <Setter Property="Glyph" Value="{x:Static fa:Solid.n}" />
                                    </DataTrigger>
                                </v:ImageView.Triggers>
                            </v:ImageView>
                            <v:BindingContextView Grid.Column="1" TargetParent="{Reference thisView}" />
                        </Grid>
                    </DataTemplate>
                </v:NodeView.ItemTemplate>
            </v:NodeView>
        </Border>
        <Border Grid.Column="1" Stroke="{StaticResource Primary}" BackgroundColor="Transparent" Padding="3"
                IsVisible="{Binding Settings.SelectedPatternNode, Converter={conv:NullToBoolConverter IsInverse=True}}">
            <v:PatternView 
                PatternNode="{Binding Settings.SelectedPatternNode}"
                Pattern="{Binding Settings.SelectedPattern}"
                SavePatternCommand="{Binding Patterns.SavePatternCommand}"
                SelectPatternCommand="{Binding Settings.SelectPatternCommand}"
                CapturePatternCommand="{Binding Patterns.CapturePatternCommand}"
                SetPatternBoundsCommand="{Binding Patterns.SetPatternBoundsCommand}"
                ClickPatternCommand="{Binding Patterns.ClickPatternCommand}"
                TestPatternCommand="{Binding Patterns.TestPatternCommand}"
                AddPatternCommand="{Binding Patterns.AddPatternCommand}"
                DeletePatternCommand="{Binding Patterns.DeletePatternCommand}"
                ApplyColorThresholdCommand="{Binding Patterns.ApplyColorThresholdCommand}"
                TestPatternTextMatchCommand="{Binding Patterns.TestPatternTextMatchCommand}"
                ApplyPatternTextMatchCommand="{Binding Patterns.ApplyPatternTextMatchCommand}" />
        </Border>
    </Grid>
</ContentView>
