<?xml version="1.0" encoding="utf-8" ?>
<ContentView xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:vm="clr-namespace:YeetMacro2.ViewModels"
             xmlns:conv="clr-namespace:YeetMacro2.Converters"
             xmlns:v="clr-namespace:YeetMacro2.Views"
             xmlns:m="clr-namespace:YeetMacro2.Data.Models"
             xmlns:fa="clr-namespace:UraniumUI.Icons.FontAwesome;assembly=UraniumUI.Icons.FontAwesome"
             xmlns:mi="clr-namespace:UraniumUI.Icons.MaterialIcons;assembly=UraniumUI.Icons.MaterialIcons"
             xmlns:skia="clr-namespace:SkiaSharp.Views.Maui.Controls;assembly=SkiaSharp.Views.Maui.Controls"
             xmlns:mct="http://schemas.microsoft.com/dotnet/2022/maui/toolkit"
             x:Class="YeetMacro2.Views.PatternView"
             x:Name="thisView">
    <Grid Padding="3">
        <skia:SKCanvasView x:Name="canvasView" EnableTouchEvents="True" PaintSurface="OnCanvasViewPaintSurface" Touch="OnCanvasViewTouch" />
        <Grid HorizontalOptions="Start" VerticalOptions="Start">
            <Grid BackgroundColor="{AppThemeBinding Light={StaticResource Background}, Dark={StaticResource BackgroundDark}}" Opacity="0.8" />
            <VerticalStackLayout>
                <HorizontalStackLayout>
                    <v:ToggleImageView x:Name="generalFlagsToggle" ToggledColor="Green" FontFamily="MaterialOutlined" Glyph="{x:Static mi:MaterialOutlined.Settings}" />
                    <v:ToggleImageView x:Name="textMatchToggle" ToggledColor="Green" FontFamily="FASolid" Glyph="{x:Static fa:Solid.SpellCheck}" />
                    <v:ToggleImageView x:Name="colorThresholdToggle" ToggledColor="Green" FontFamily="MaterialOutlined" Glyph="{x:Static mi:MaterialOutlined.Invert_colors}" />
                    <v:ToggleImageView x:Name="offsetToggle" ToggledColor="Green" FontFamily="FASolid" Glyph="{x:Static fa:Solid.ArrowRightArrowLeft}" />
                    <v:ToggleImageView x:Name="infoToggle" ToggledColor="Green" FontFamily="MaterialOutlined" Glyph="{x:Static mi:MaterialOutlined.Info}" />
                </HorizontalStackLayout>
                <HorizontalStackLayout Spacing="5" IsVisible="{Binding IsToggled, Source={x:Reference generalFlagsToggle}}">
                    <Label VerticalOptions="Center" Padding="0" Text="VariancePct" />
                    <Entry VerticalOptions="Center" Keyboard="Numeric" Text="{Binding Pattern.VariancePct, Source={Reference thisView}}" />
                </HorizontalStackLayout>
                <HorizontalStackLayout Margin="0" Padding="0" IsVisible="{Binding IsToggled, Source={x:Reference generalFlagsToggle}}">
                    <CheckBox TranslationX="{OnPlatform WinUI=20, Android=10}" VerticalOptions="Center" Margin="0" IsChecked="{Binding PatternNode.IsMultiPattern, Source={Reference thisView}}" />
                    <Label Margin="0" VerticalOptions="Center" Padding="0" Text="MultiPattern" />
                    <CheckBox TranslationX="{OnPlatform WinUI=20, Android=10}" Margin="0" VerticalOptions="Center" IsChecked="{Binding Pattern.IsBoundsPattern, Source={Reference thisView}}" />
                    <Label Margin="0" VerticalOptions="Center" Padding="0" Text="BoundsPattern" />
                    <CheckBox TranslationX="{OnPlatform WinUI=20, Android=10}" Margin="0" VerticalOptions="Center" IsChecked="{Binding Pattern.IsLocationDynamic, Source={Reference thisView}}" />
                    <Label Margin="0" VerticalOptions="Center" Padding="0" Text="DynamicLocation" />
                </HorizontalStackLayout>
                <HorizontalStackLayout Margin="0" Padding="0" IsVisible="{Binding IsToggled, Source={x:Reference textMatchToggle}}">
                    <CheckBox TranslationX="{OnPlatform WinUI=20, Android=10}" IsChecked="{Binding Pattern.TextMatch.IsActive, Source={Reference thisView}}" />
                    <Label Margin="0" VerticalOptions="Center" Padding="0" Text="TextMatch:" />
                    <Entry Margin="5,0,0,0" VerticalOptions="Center" Text="{Binding Pattern.TextMatch.Text, Source={Reference thisView}}" />
                    <Label Margin="5,0,0,0" VerticalOptions="Center" Padding="0" Text="Whitelist:" />
                    <Entry Margin="5,0,0,0" VerticalOptions="Center" Text="{Binding Pattern.TextMatch.WhiteList, Source={Reference thisView}}" />
                    <Button Text="Test" Command="{Binding TestPatternTextMatchCommand, Source={Reference thisView}}">
                        <Button.CommandParameter>
                            <MultiBinding Converter="{conv:PassThroughConverter}">
                                <Binding Path="Pattern" Source="{Reference thisView}" />
                                <Binding Path="Text" Source="{Reference xOffset}" />
                                <Binding Path="Text" Source="{Reference yOffset}" />
                                <Binding Path="IsChecked" Source="{Reference doTestCalc}" />
                            </MultiBinding>
                        </Button.CommandParameter>
                    </Button>
                    <Button Text="Apply" Command="{Binding ApplyPatternTextMatchCommand, Source={Reference thisView}}">
                        <Button.CommandParameter>
                            <MultiBinding Converter="{conv:PassThroughConverter}">
                                <Binding Path="Pattern" Source="{Reference thisView}" />
                                <Binding Path="Text" Source="{Reference xOffset}" />
                                <Binding Path="Text" Source="{Reference yOffset}" />
                                <Binding Path="IsChecked" Source="{Reference doTestCalc}" />
                            </MultiBinding>
                        </Button.CommandParameter>
                    </Button>
                </HorizontalStackLayout>
                <HorizontalStackLayout Margin="0" Padding="0" IsVisible="{Binding IsToggled, Source={x:Reference colorThresholdToggle}}">
                    <CheckBox TranslationX="{OnPlatform WinUI=20, Android=10}" IsChecked="{Binding Pattern.ColorThreshold.IsActive, Source={Reference thisView}}" CheckedChanged="colorThresholdIsActive_CheckedChanged" />
                    <Label Margin="0" VerticalOptions="Center" Padding="0" Text="Color Threshold:" />
                    <v:IntegerStepper x:Name="colorThresholdVariancePct" Value="30" Increment="10" />
                    <Label Margin="0" VerticalOptions="Center" Padding="0" Text="@" />
                    <Entry x:Name="colorThresholdColor" Margin="0,0,0,0" VerticalOptions="Center" IsReadOnly="True" />
                    <skia:SKCanvasView Margin="5,0,0,0" x:Name="colorPickCanvas" PaintSurface="OnColorPickPaintSurface" WidthRequest="20" HeightRequest="20" />
                    <Button Text="Apply" Command="{Binding ApplyColorThresholdCommand, Source={Reference thisView}}">
                        <Button.CommandParameter>
                            <MultiBinding Converter="{conv:PassThroughConverter}">
                                <Binding Path="Pattern" Source="{Reference thisView}" />
                                <Binding Path="Value" Source="{Reference colorThresholdVariancePct}" />
                                <Binding Path="Text" Source="{Reference colorThresholdColor}" />
                                <Binding Path="SelectPatternCommand" Source="{Reference thisView}" />
                            </MultiBinding>
                        </Button.CommandParameter>
                    </Button>
                </HorizontalStackLayout>
                <HorizontalStackLayout Margin="0" Padding="0" IsVisible="{Binding IsToggled, Source={x:Reference offsetToggle}}">
                    <Label  VerticalOptions="Center" Padding="0" Text="OffsetCalcType" />
                    <HorizontalStackLayout>
                        <Grid Margin="10,0,0,0" Padding="0" VerticalOptions="Center">
                            <Label Margin="0" Padding="0" Text="{Binding Pattern.OffsetCalcType, Source={Reference thisView}}" VerticalOptions="Center" />
                            <Border Opacity="0.2" BackgroundColor="Gray">
                                <Border.StrokeShape>
                                    <RoundRectangle CornerRadius="10" />
                                </Border.StrokeShape>
                                <ImageButton Margin="0" Padding="0" BindingContext="{Binding Pattern, Source={Reference thisView}}" Clicked="offsetCalcType_Clicked" />
                            </Border>
                        </Grid>
                    </HorizontalStackLayout>
                    <Label Margin="5,0,0,0" VerticalOptions="Center" Padding="0" Text="Scale:" />
                    <Entry x:Name="scale" Margin="5,0,0,0" VerticalOptions="Center" Keyboard="Numeric" Text="1.0" />
                </HorizontalStackLayout>
                <HorizontalStackLayout Spacing="5" VerticalOptions="End" IsVisible="{Binding IsToggled, Source={x:Reference offsetToggle}}">
                    <CheckBox TranslationX="{OnPlatform WinUI=20, Android=10}" x:Name="doTestCalc" IsChecked="True" Margin="0,0,0,0" VerticalOptions="Center" />
                    <Label Margin="0,0,0,0" VerticalOptions="Center" Padding="0" Text="TestCalc" />
                    <Label Margin="0" VerticalOptions="Center" Padding="0" Text="XOffset:" />
                    <Entry x:Name="xOffset" VerticalOptions="Center" Keyboard="Numeric" Text="0"  />
                    <Label Margin="0" VerticalOptions="Center" Padding="0" Text="YOffset:" />
                    <Entry x:Name="yOffset" VerticalOptions="Center" Keyboard="Numeric" Text="0" />
                </HorizontalStackLayout>
                <HorizontalStackLayout Margin="0" Padding="0" Spacing="5" IsVisible="{Binding IsToggled, Source={x:Reference offsetToggle}}">
                    <Label Margin="0" VerticalOptions="Center" Padding="0" Text="Horizontal Stretch Multiplier:" />
                    <Entry Margin="0" VerticalOptions="Center" Keyboard="Numeric" Text="{Binding Pattern.HorizontalStretchMultiplier, Source={Reference thisView}}" />
                    <Label Margin="0" VerticalOptions="Center" Padding="0" Text="Vertical Stretch Multiplier:" />
                    <Entry Margin="0" VerticalOptions="Center" Keyboard="Numeric" Text="{Binding Pattern.VerticalStretchMultiplier, Source={Reference thisView}}" />
                </HorizontalStackLayout>
                <HorizontalStackLayout IsVisible="{Binding PatternNode.IsMultiPattern, Source={Reference thisView}}">
                    <CollectionView ItemsSource="{Binding PatternNode.Patterns, Source={Reference thisView}}">
                        <CollectionView.ItemTemplate>
                            <DataTemplate x:DataType="m:Pattern">
                                <Grid HeightRequest="20">
                                    <Label Text="{Binding Name}" Margin="0" Padding="0" VerticalOptions="Center" BackgroundColor="Transparent">
                                        <Label.Triggers>
                                            <DataTrigger TargetType="{x:Type Label}" Binding="{Binding IsSelected}" Value="True">
                                                <Setter Property="Background" Value="Blue" />
                                            </DataTrigger>
                                        </Label.Triggers>
                                    </Label>
                                    <ImageButton Command="{Binding SelectPatternCommand, Source={RelativeSource AncestorType={x:Type v:PatternView}}}" CommandParameter="{Binding .}" />
                                </Grid>
                            </DataTemplate>
                        </CollectionView.ItemTemplate>
                    </CollectionView>
                </HorizontalStackLayout>
            </VerticalStackLayout>
        </Grid>
        <VerticalStackLayout BackgroundColor="{AppThemeBinding Light={StaticResource Background}, Dark={StaticResource BackgroundDark}}" Opacity="0.8"
                             VerticalOptions="End" HorizontalOptions="End">
            <HorizontalStackLayout Spacing="5" VerticalOptions="End" HorizontalOptions="End" IsVisible="{Binding IsToggled, Source={x:Reference infoToggle}}">
                <v:ImageView FontFamily="MaterialOutlined" Glyph="{x:Static mi:MaterialOutlined.Rectangle}" Color="{StaticResource Primary}" />
                <Label Text="{Binding Pattern.RectDisplay, Source={Reference thisView}}" />
            </HorizontalStackLayout>
            <!--<HorizontalStackLayout Spacing="5" VerticalOptions="End" HorizontalOptions="End">
                <v:ImageView FontFamily="MaterialOutlined" Glyph="{x:Static mi:MaterialOutlined.Image_aspect_ratio}" Color="{StaticResource Primary}" />
                <Label Text="{Binding Patterns.CurrentResolution}" />
            </HorizontalStackLayout>-->
            <HorizontalStackLayout Spacing="5" VerticalOptions="End" HorizontalOptions="End" IsVisible="{Binding IsToggled, Source={x:Reference infoToggle}}">
                <v:ImageView FontFamily="MaterialOutlined" Glyph="{x:Static mi:MaterialOutlined.Image}" Color="{StaticResource Primary}" />
                <Label Text="{Binding Pattern.Resolution, Source={Reference thisView}}" />
            </HorizontalStackLayout>
            <HorizontalStackLayout VerticalOptions="End" HorizontalOptions="End">
                <v:ImageView FontFamily="MaterialOutlined" Glyph="{x:Static mi:MaterialOutlined.Photo_camera_front}" Color="{StaticResource Primary}"
                             Command="{Binding CapturePatternCommand, Source={Reference thisView}}">
                    <v:ImageView.CommandParameter>
                        <MultiBinding Converter="{conv:PassThroughConverter}">
                            <Binding Path="Pattern" Source="{Reference thisView}" />
                            <Binding Path="PatternNode" Source="{Reference thisView}" />
                            <Binding Path="SelectPatternCommand" Source="{Reference thisView}" />
                        </MultiBinding>
                    </v:ImageView.CommandParameter>
                </v:ImageView>
                <v:ImageView FontFamily="MaterialRegular" Glyph="{x:Static mi:MaterialRegular.Crop_free}" Color="{StaticResource Primary}"
                             Command="{Binding SetPatternBoundsCommand, Source={Reference thisView}}"
                             CommandParameter="{Binding Pattern, Source={Reference thisView}}" />
                <v:ImageView FontFamily="FASolid" Glyph="{x:Static fa:Solid.HandPointer}" Color="{StaticResource Primary}"
                             Command="{Binding ClickPatternCommand, Source={Reference thisView}}">
                    <v:ImageView.CommandParameter>
                        <MultiBinding Converter="{conv:PassThroughConverter}">
                            <Binding Path="Pattern" Source="{Reference thisView}" />
                            <Binding Path="Text" Source="{Reference xOffset}" />
                            <Binding Path="Text" Source="{Reference yOffset}" />
                            <Binding Path="IsChecked" Source="{Reference doTestCalc}" />
                        </MultiBinding>
                    </v:ImageView.CommandParameter>
                </v:ImageView>
                <v:ImageView FontFamily="FASolid" Glyph="{x:Static fa:Solid.Eye}" Color="{StaticResource Primary}"
                             Command="{Binding TestPatternCommand, Source={Reference thisView}}">
                    <v:ImageView.CommandParameter>
                        <MultiBinding Converter="{conv:PassThroughConverter}">
                            <Binding Path="Pattern" Source="{Reference thisView}" />
                            <Binding Path="Text" Source="{Reference xOffset}" />
                            <Binding Path="Text" Source="{Reference yOffset}" />
                            <Binding Path="IsChecked" Source="{Reference doTestCalc}" />
                            <Binding Path="Text" Source="{Reference scale}" />
                        </MultiBinding>
                    </v:ImageView.CommandParameter>
                </v:ImageView>
                <v:ImageView FontFamily="FASolid" Glyph="{x:Static fa:Solid.Plus}" Color="{StaticResource Primary}"
                             IsVisible="{Binding PatternNode.IsMultiPattern, Source={Reference thisView}}"
                             Command="{Binding AddPatternCommand, Source={Reference thisView}}" 
                             CommandParameter="{Binding PatternNode, Source={Reference thisView}}" />
                <v:ImageView FontFamily="FASolid" Glyph="{x:Static fa:Solid.TrashCan}" Color="Red"
                             IsVisible="{Binding PatternNode.IsMultiPattern, Source={Reference thisView}}"
                             Command="{Binding DeletePatternCommand, Source={Reference thisView}}">
                    <v:ImageView.CommandParameter>
                        <MultiBinding Converter="{conv:PassThroughConverter}">
                            <Binding Path="Pattern" Source="{Reference thisView}" />
                            <Binding Path="PatternNode" Source="{Reference thisView}" />
                        </MultiBinding>
                    </v:ImageView.CommandParameter>
                </v:ImageView>
                <v:ImageView FontFamily="MaterialOutlined" Glyph="{x:Static mi:MaterialOutlined.Save}" Color="{StaticResource Primary}" 
                             Command="{Binding SavePatternCommand, Source={Reference thisView}}">
                    <v:ImageView.CommandParameter>
                        <MultiBinding Converter="{conv:PassThroughConverter}">
                            <Binding Path="Pattern" Source="{Reference thisView}" />
                            <Binding Path="PatternNode" Source="{Reference thisView}" />
                        </MultiBinding>
                    </v:ImageView.CommandParameter>
                </v:ImageView>
            </HorizontalStackLayout>
        </VerticalStackLayout>
    </Grid>
</ContentView>
