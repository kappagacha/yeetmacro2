[
  {
    "Name": "itemWorldLoop",
    "Text": "function itemWorldLoop() {\n\tconst loopPatterns = [patterns.stronghold.gem, patterns.titles.itemWorld, patterns.battle.auto.enabled, patterns.battle.auto.disabled];\n\twhile (true) {\n\t\tconst result = macroService.findPattern(loopPatterns, {});\n\t\tif (result.IsSuccess) {\n\t\t\tlog(\u0060itemWorldLoop: ${result.Path}\u0060);\n\t\t\tswitch(result.Path) {\n\t\t\t\tcase \u0027stronghold.gem\u0027:\n\t\t\t\t\tif (handleNotifications().numHandled) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tmacroService.pollPattern(patterns.tabs.facilities, { predicatePattern: patterns.facilities.itemWorld, doClick: true });\n\t\t\t\t\tmacroService.pollPattern(patterns.facilities.itemWorld, { predicatePattern: patterns.titles.itemWorld, doClick: true });\n\t\t\t\tbreak;\n\t\t\t\tcase \u0027titles.itemWorld\u0027:\n\t\t\t\t\tif (handleNotifications().numHandled) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tmacroService.pollPattern(patterns.itemWorld.armor.disabled, { predicatePattern: patterns.itemWorld.armor.enabled, doClick: true });\n\t\t\t\t\tmacroService.pollPattern(patterns.itemWorld.item.name, { predicatePattern: patterns.itemWorld.item.go, doClick: true });\n\t\t\t\t\tmacroService.pollPattern(patterns.itemWorld.item.go, { predicatePattern: patterns.battle, doClick: true });\n\t\t\t\t\tmacroService.pollPattern(patterns.battle, { predicatePattern: [patterns.battle.auto.enabled, patterns.battle.auto.disabled], doClick: true });\n\t\t\t\t\tdoItem();\n\t\t\t\tbreak;\n\t\t\t\tcase \u0027battle.auto.enabled\u0027:\n\t\t\t\tcase \u0027battle.auto.disabled\u0027:\n\t\t\t\t\tdoItem();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tsleep(1000);\n\t}\n}\n\nfunction doItem() {\n\tconst loopPatterns = [patterns.itemWorld.leave, patterns.itemWorld.subdue, patterns.prompt.no, patterns.battle.auto.disabled, patterns.battle.result];\n\tlet done = false;\n\tlet subduing = false;\n\twhile (!done) {\n\t\tconst result = macroService.findPattern(loopPatterns, {});\n\t\tif (result.IsSuccess) {\n\t\t\tlog(\u0060doItem: ${result.Path}\u0060);\n\t\t\tswitch(result.Path) {\n\t\t\t\tcase \u0027itemWorld.leave\u0027:\n\t\t\t\t\tmacroService.pollPattern(patterns.itemWorld.leave, { predicatePattern: patterns.titles.itemWorld, doClick: true });\n\t\t\t\t\tdone = true;\n\t\t\t\tbreak;\n\t\t\t\tcase \u0027battle.battle.result\u0027:\n\t\t\t\t\tsubduing = false;\n\t\t\t\t\tsleep(1000);\n\t\t\t\tbreak;\n\t\t\t\tcase \u0027prompt.no\u0027:\n\t\t\t\t\tmacroService.clickPoint(result.Point);\n\t\t\t\t\tsleep(1000);\n\t\t\t\tbreak;\n\t\t\t\tcase \u0027battle.auto.disabled\u0027:\n\t\t\t\t\tmacroService.clickPattern(patterns.battle.auto.disabled);\n\t\t\t\t\tsleep(1000);\n\t\t\t\tbreak;\n\t\t\t\tcase \u0027itemWorld.subdue\u0027:\n\t\t\t\t\tif (subduing) {\n\t\t\t\t\t\tmacroService.clickPattern(patterns.itemWorld.subdue);\n\t\t\t\t\t\tsleep(500);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// for now just bribe by 1 goldenCandy\n\t\t\t\t\tmacroService.pollPattern(patterns.itemWorld.bribe, { predicatePattern: patterns.itemWorld.bribe.goldenCandy, doClick: true });\n\t\t\t\t\tmacroService.clickPattern(patterns.itemWorld.bribe.goldenCandy);\n\t\t\t\t\tsleep(500);\n\t\t\t\t\tmacroService.clickPattern(patterns.itemWorld.bribe.button);\n\t\t\t\t\tsubduing = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tsleep(2000);\n\t}\n}",
    "IsSelected": false
  },
  {
    "Name": "itemWorldExplorer",
    "Text": "const loopPatterns = [patterns.stronghold.gem, patterns.titles._4dNetherworld, patterns.titles.itemWorldExplorer];\nlet done = false;\n\nwhile (!done) {\n\tconst result = macroService.findPattern(loopPatterns, {});\n\tif (result.IsSuccess) {\n\t\tlog(\u0060itemWorldLoop: ${result.Path}\u0060);\n\t\tswitch(result.Path) {\n\t\t\tcase \u0027stronghold.gem\u0027:\n\t\t\t\t\tmacroService.pollPattern(patterns.tabs.facilities, { predicatePattern: patterns.facilities._4dNetherworld, doClick: true });\n\t\t\t\t\tmacroService.pollPattern(patterns.facilities._4dNetherworld, { predicatePattern: patterns.titles._4dNetherworld, doClick: true });\n\t\t\t\t\t//var notificationResult = macroService.findPattern(patterns.facilities._4dNetherworld.notification, {});\n\t\t\t\t\t//if (notificationResult.IsSuccess) {\n\t\t\t\t\t//\tmacroService.pollPattern(patterns.facilities._4dNetherworld, { predicatePattern: patterns.titles._4dNetherworld, doClick: true });\n\t\t\t\t\t//} else {\n\t\t\t\t\t//\tdone = true;\n\t\t\t\t\t//}\n\t\t\t\tbreak;\n\t\t\tcase \u0027titles._4dNetherworld\u0027:\n\t\t\t\tmacroService.clickPattern(patterns._4dNetherworld.itemWorldExplorer, {});\n\t\t\t\tsleep(1000);\n\t\t\tbreak;\n\t\t\tcase \u0027titles.itemWorldExplorer\u0027:\n\t\t\t\tconst returnAllResult = macroService.findPattern([patterns._4dNetherworld.itemWorldExplorer.returnAll.enabled, patterns._4dNetherworld.itemWorldExplorer.returnAll.enabled], {});\n\t\t\t\tif (returnAllResult.IsSuccess \u0026\u0026 returnAllResult.Path.includes(\u0027enabled\u0027)) {\n\t\t\t\t\tmacroService.pollPattern(patterns._4dNetherworld.itemWorldExplorer.returnAll.enabled, { predicatePattern: patterns._4dNetherworld.itemWorldExplorer.confirmReturn, doClick: true });\n\t\t\t\t\tmacroService.pollPattern(patterns._4dNetherworld.itemWorldExplorer.confirmReturn, { predicatePattern: patterns._4dNetherworld.itemWorldExplorer.returnButton, doClick: true });\n\t\t\t\t\tmacroService.pollPattern(patterns._4dNetherworld.itemWorldExplorer.returnButton, { predicatePattern: patterns._4dNetherworld.itemWorldExplorer.explorationRequest, touchPattern: patterns.general.touchScreen, doClick: true });\n\t\t\t\t\tmacroService.pollPattern(patterns._4dNetherworld.itemWorldExplorer.explorationRequest, { predicatePattern: patterns._4dNetherworld.itemWorldExplorer.explorationRequest.selectEquipment, touchPattern: patterns.general.touchScreen, doClick: true });\n\t\t\t\t\tconst itemsResult = macroService.findPattern(patterns._4dNetherworld.itemWorldExplorer.explorationRequest.selectEquipment.name, { limit: 10 });\n\t\t\t\t\tfor (const point of itemsResult.Points) {\n\t\t\t\t\t\tmacroService.clickPoint(point);\n\t\t\t\t\t\tsleep(250);\n\t\t\t\t\t}\n\t\t\t\t\tmacroService.pollPattern(patterns._4dNetherworld.itemWorldExplorer.explorationRequest.selectEquipment.confirm, { predicatePattern: patterns._4dNetherworld.itemWorldExplorer.explorationRequest.exploreButton, doClick: true });\n\t\t\t\t\tmacroService.pollPattern(patterns._4dNetherworld.itemWorldExplorer.explorationRequest.exploreButton, { predicatePattern: patterns._4dNetherworld.itemWorldExplorer.explorationRequest, doClick: true });\n\t\t\t\t\tdone = true;\n\t\t\t\t} else if (returnAllResult.IsSuccess) {\n\t\t\t\t\tdone = true;\n\t\t\t\t}\n\t\t\t\tsleep(1000);\n\t\t\tbreak;\n\t\t}\n\t}\n\tsleep(1000);\n}",
    "IsSelected": false
  },
  {
    "Name": "handleNotifications",
    "Text": "macroService.pollPattern(patterns.tabs.facilities, { predicatePattern: patterns.facilities._4dNetherworld, doClick: true });\nconst _4dNetherworldNotification = macroService.findPattern(patterns.facilities._4dNetherworld.notification, {});\nconst summerResortNotification = macroService.findPattern(patterns.facilities.summerResort.notification, {});\n\nconst result = {\n\t_4dNetherworld : _4dNetherworldNotification.IsSuccess,\n\tsummerResort : summerResortNotification.IsSuccess,\n\tnumHandled : 0\n}\n\nif (result._4dNetherworld) {\n    log(\u0060handleNotifications: 4dNetherworld\u0060);\n\tmacroService.pollPattern(patterns.facilities._4dNetherworld, { predicatePattern: patterns.titles._4dNetherworld, doClick: true });\n\tsleep(1000)\n\titemWorldExplorer();\n\tgoToStronghold();\n\tresult.numHandled\u002B\u002B;\n}\n\nif (result.summerResort) {\n    log(\u0060handleNotifications: summerResort\u0060);\n    if (!result._4dNetherworld) {\n        macroService.pollPattern(patterns.facilities.summerResort, { predicatePattern: patterns.summerResort.requestBoard, doClick: true });\n\tsleep(1000)\n    }\n\tdepository();\n\tgoToStronghold();\n\tresult.numHandled\u002B\u002B;\n}\n\nif (!result.numHandled) {\n\tmacroService.pollPattern(patterns.tabs.facilities, { inversePredicatePattern: patterns.facilities._4dNetherworld, doClick: true });\n}\n\nreturn result;",
    "IsSelected": false
  },
  {
    "Name": "goToStronghold",
    "Text": "const loopPatterns = [patterns.stronghold.gem, patterns.titles._4dNetherworld, patterns.titles.itemWorldExplorer, patterns.summerResort.requestBoard, patterns.general.close, patterns.general.back];\nlet done = false;\n\nwhile (!done) {\n\tconst result = macroService.findPattern(loopPatterns, {});\n\tif (result.IsSuccess) {\n        log(\u0060goToStronghold: ${result.Path}\u0060);\n\t\tswitch(result.Path) {\n\t\t\tcase \u0027stronghold.gem\u0027:\n\t\t\t\tdone = true;\n\t\t\t\tbreak;\n\t\t\tcase \u0027titles._4dNetherworld\u0027:\n\t\t\tcase \u0027summerResort.requestBoard\u0027:\n\t\t\t\tmacroService.clickPattern(patterns.tabs.stronghold, {});\n\t\t\t\tsleep(1000);\n\t\t\tbreak;\n\t\t\tcase \u0027titles.itemWorldExplorer\u0027:\n\t\t\t\tmacroService.clickPattern(patterns.general.back, {});\n\t\t\t\tsleep(1000);\n\t\t\tbreak;\n\t\t\tcase \u0027general.close\u0027:\n\t\t\tcase \u0027general.back\u0027:\n\t\t\t\tmacroService.clickPoint(result.Point);\n\t\t\t\tsleep(1000);\n\t\t\tbreak;\n\t\t}\n\t}\n\tsleep(1000);\n}",
    "IsSelected": false
  },
  {
    "Name": "depository",
    "Text": "const loopPatterns = [patterns.stronghold.gem, patterns.summerResort.requestBoard, patterns.summerResort.depository.title];\nlet done = false;\n\nwhile (!done) {\n\tconst result = macroService.findPattern(loopPatterns, {});\n\tif (result.IsSuccess) {\n\t\tlog(\u0060depository: ${result.Path}\u0060);\n\t\tswitch(result.Path) {\n\t\t\tcase \u0027stronghold.gem\u0027:\n\t\t\t\tmacroService.pollPattern(patterns.tabs.facilities, { predicatePattern: patterns.facilities.summerResort, doClick: true });\n\t\t\t\tmacroService.pollPattern(patterns.facilities.summerResort, { predicatePattern: patterns.titles.summerResort, doClick: true });\n\t\t\t\tbreak;\n\t\t\tcase \u0027summerResort.requestBoard\u0027:\n\t\t\t\tmacroService.clickPattern(patterns.summerResort.depository, {});\n\t\t\t\tsleep(1000);\n\t\t\tbreak;\n\t\t\tcase \u0027summerResort.depository.title\u0027:\n\t\t\t\tmacroService.pollPattern(patterns.summerResort.depository.checkStatus, { predicatePattern: patterns.summerResort.depository.checkStatus.title, doClick: true });\n\t\t\t\t// armor until I get configuration implemented\n\t\t\t\tmacroService.pollPattern(patterns.summerResort.depository.checkStatus.armor.disabled, { predicatePattern: patterns.summerResort.depository.checkStatus.armor.enabled, doClick: true });\n\t\t\t\tsleep(500);\n\t\t\t\tfor (let i = 0; i \u003C 4; i\u002B\u002B) {\n\t\t\t\t\tconst maxLevelResult = macroService.findPattern(patterns.summerResort.depository.checkStatus.maxLevel, { limit : 6 });\n\t\t\t\t\tif (maxLevelResult.IsSuccess) {\n\t\t\t\t\t\tfor (const point of maxLevelResult.Points) {\n\t\t\t\t\t\t\tmacroService.clickPoint(point);\n\t\t\t\t\t\t\tsleep(250);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst withrawResult = macroService.findPattern(patterns.summerResort.depository.checkStatus.withraw.enabled, { });\n\t\t\t\t\tif (withrawResult.IsSuccess) {\n\t\t\t\t\t\tmacroService.pollPattern(patterns.summerResort.depository.checkStatus.withraw.enabled, { predicatePattern: patterns.prompt.yes, doClick: true });\n\t\t\t\t\t\tmacroService.pollPattern(patterns.prompt.yes, { inversePredicatePattern: patterns.prompt.yes, doClick: true });\n\t\t\t\t\t}\n\t\t\t\t\t// scroll down\n\t\t\t\t\tmacroService.clickPattern(patterns.summerResort.depository.checkStatus.scrollDown, { clickOffsetX : 20 });\n\t\t\t\t\tsleep(1000);\n\t\t\t\t}\n\t\t\t\tmacroService.pollPattern(patterns.summerResort.depository.checkStatus.deposit, { predicatePattern: patterns.summerResort.depository.deposit.title, doClick: true });\n\t\t\t\t// armor until I get configuration implemented\n\t\t\t\tmacroService.pollPattern(patterns.summerResort.depository.checkStatus.armor.disabled, { predicatePattern: patterns.summerResort.depository.checkStatus.armor.enabled, doClick: true });\n\t\t\t\tfor (let i = 0; i \u003C 3; i\u002B\u002B) {\n\t\t\t\t\tconst itemResult = macroService.findPattern(patterns.summerResort.depository.deposit.name, { limit : 8 });\n\t\t\t\t\tif (itemResult.IsSuccess) {\n\t\t\t\t\t\tfor (let point of itemResult.Points) {\n\t\t\t\t\t\t\tmacroService.clickPoint(point);\n\t\t\t\t\t\t\tsleep(250);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst depositResult = macroService.findPattern(patterns.summerResort.depository.deposit.depositButton.enabled, { });\n\t\t\t\t\tif (depositResult.IsSuccess) {\n\t\t\t\t\t\tmacroService.pollPattern(patterns.summerResort.depository.deposit.depositButton.enabled, { predicatePattern: patterns.prompt.yes, doClick: true });\n\t\t\t\t\t\tmacroService.pollPattern(patterns.prompt.yes, { inversePredicatePattern: patterns.prompt.yes, doClick: true });\n\t\t\t\t\t}\n\t\t\t\t\t// scroll down\n\t\t\t\t\tmacroService.clickPattern(patterns.summerResort.depository.deposit.scrollDown, { });\n\t\t\t\t\tsleep(500);\n\t\t\t\t}\n\t\t\t\tdone = true\n\t\t\tbreak;\n\t\t}\n\t}\n\tsleep(1000);\n}",
    "IsSelected": true
  },
  {
    "Name": "test",
    "Text": "",
    "IsSelected": false
  },
  {
    "Name": "test2",
    "Text": "var depositResult = macroService.findPattern(patterns.summerResort.depository.deposit.depositButton.enabled, { });\nif (depositResult.IsSuccess) {\n\tmacroService.pollPattern(patterns.summerResort.depository.deposit.depositButton.enabled, { predicatePattern: patterns.prompt.yes, doClick: true });\n\tmacroService.pollPattern(patterns.prompt.yes, { inversePredicatePattern: patterns.prompt.yes, doClick: true });\n}\n// scroll down\nmacroService.clickPattern(patterns.summerResort.depository.checkStatus.scrollDown, { clickOffsetX : 20 });\nsleep(500);",
    "IsSelected": false
  }
]